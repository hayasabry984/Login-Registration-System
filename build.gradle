//it’s a Spring Boot project configured with Gradle (instead of Maven).
//Gradle is a build tool that defines: how the project is built, what dependencies it uses, and how it runs.
plugins {
    id 'java' //Enables Java support
    id 'org.springframework.boot' version '3.4.5' //Adds Spring Boot features (e.g. auto-configuration, embedded server).
    id 'io.spring.dependency-management' version '1.1.7'  // Manages Spring dependency versions
    id 'application' //define the main class and run the app via gradle run
}

group = 'com.example' //Defines the base package (com.example)
version = '1.0-SNAPSHOT' //a snapshot version. This is metadata useful for publishing your project (optional for local projects).

//Main Class Configuration: Specifies the entry point of the app
application {
    mainClass = 'com.example.Main'
}

//Java Version configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
        //Toolchains make sure Gradle uses the correct version of the JDK even if it’s not the system default.
    }
}

//Lombok configurations block ensures annotation processors like Lombok are available at compile time
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral() //repositories block Gradle to fetch dependencies from Maven Central.
}

dependencies {
    //Testing
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    //For writing and running unit/integration tests using JUnit and Spring's testing tools.
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //Web (REST APIs)
    //enables Spring MVC, which used to build RESTful HTTP APIs for login, registration, email verification, etc and handle HTTP requests
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Security for authentication, authorization, password encryption, and securing API endpoints
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //Database (JPA + PostgreSQL)
    //Simplifies database operations with Hibernate.
    //spring data JPA allows database interaction with the database using java objects (ORM)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //PostgreSQL driver to connect the application to the database
    runtimeOnly 'org.postgresql:postgresql'

    //Email support to send emails for account verification, password reset
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    //Spring Dev tools to enable hot-reloading during development, it automatically restarts the app when files change during development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //Lombok to reduce boilerplate code, it auto generates setters, getters, constructors, toString(), etc.
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    //JWT (JSON Web Tokens) that Handles creating, signing, and verifying JWTs tokens for secure authentication.
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

}

test {
    useJUnitPlatform() //use the JUnit platform for running tests.
}