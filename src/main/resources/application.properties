# Configuration

# Configures Spring Boot to connect to the PostgreSQL database.
# Enables Spring Data JPA to manage user data using Java objects.
# Uses Hibernate (via JPA) to simplify database operations.
# Supports easy CRUD operations and custom queries with minimal boilerplate.

spring.datasource.url= jdbc:postgresql://localhost:5432/authdb
# Specifies the JDBC URL to connect to the PostgreSQL database

spring.datasource.username= postgres
# Username for PostgreSQL database authentication

spring.datasource.password=36zq67ry
# Password for the PostgreSQL database user

# Tells Spring Boot to use the PostgreSQL JDBC driver
spring.datasource.driver-class-name=org.postgresql.Driver

# Enables Hibernate (via JPA) to auto-create/update tables from entity classes.
spring.jpa.hibernate.ddl-auto=update

# Prints SQL queries in the console along with the logs
spring.jpa.show-sql=true

spring.jpa.open-in-view=false
#to disable OSIV, preventing unintended database queries during view rendering, which can cause performance issues and errors in production.

# JWT Configuration: Secures user sessions with signed tokens.
security.jwt.secret-key=8Sd9HiWlz8yq2PFgryKjXxueR1rnVfib
# Secret key for signing JWT tokens used in authentication

security.jwt.expiration-time=3600000
# in milliseconds (1 hour)

# Configures Gmail SMTP to send verification and reset emails.
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=hayasabry984@gmail.com
# Email address used to send verification and password reset emails

spring.mail.password=mbocrluwgackyins
# App-specific password for the Gmail account (required if 2FA is enabled)

spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Enables SQL Logging (for debugging purposes)
logging.level.org.hibernate.SQL=DEBUG
logging.level.com.example=DEBUG