# Configuration

# Configures Spring Boot to connect to the PostgreSQL database.
# Enables Spring Data JPA to manage user data using Java objects.
# Uses Hibernate (via JPA) to simplify database operations.
# Supports easy CRUD operations and custom queries with minimal boilerplate.
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# Tells Spring Boot to use the PostgreSQL JDBC driver
spring.datasource.driver-class-name=org.postgresql.Driver

# Enables Hibernate (via JPA) to auto-create/update tables from entity classes.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Prints SQL queries in the console along with the logs
spring.jpa.show-sql=true

# JWT Configuration: Secures user sessions with signed tokens.
security.jwt.secret-key=${JWT_SECRET_KEY}
security.jwt.expiration-time=3600000  # in milliseconds (1 hour)

# Configures Gmail SMTP to send verification and reset emails.
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SUPPORT_EMAIL}
spring.mail.password=${APP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Imports environment variables from .env file for sensitive data.
spring.config.import=optional:file:.env[.properties]

# Enables SQL Logging (for debugging purposes)
logging.level.org.hibernate.SQL=DEBUG
